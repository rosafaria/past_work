package graphicInterface;

import globalclasses.Message;
import interfaces.UIWindow;

import java.util.ArrayList;

import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;

/** Classe de interface grafica para escolher um item de uma lista.
 */
public class Requests extends UIWindow {
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	
	private String[] requests;
        private final UIClient client;
        private ArrayList<Object> par;
        private int type;
	 
	public Requests(int type, UIClient client) {
            initComponents();
            this.setLocationRelativeTo(null);
            this.setTitle(client.getUsername());

            this.client = client;
            if (type == 13) this.type = 1;
            else this.type = 2;
            
            //1 for group requests, 2 for meeting reqs
            if (type == 2) {
                ListSelectionModel listSelectionModel = table.getSelectionModel();
                listSelectionModel.addListSelectionListener(new ListSelectionListener() {
                    public void valueChanged(ListSelectionEvent e) { 
                        int selected = table.getSelectedRow();
                        if (!table.getValueAt(selected,1).equals("PENDING")) {
                            rejectBtn.setEnabled(false);
                            acceptBtn.setEnabled(false);
                        }
                        else {
                            rejectBtn.setEnabled(true);
                            acceptBtn.setEnabled(true);
                        }
                    }
                });
            }
            setModel();
	}
        
        public class MyTableModel extends DefaultTableModel{
            
            public MyTableModel(Object[][]data, Object[] header) {
                super(data, header);
            }
            
            public boolean isCellEditable(int row, int column){
              return false;
            }
        }
        
        private void setModel() {
            int aux = 13;
            if (type != 1) aux = 16;         
            Message result = client.sendTCP(aux, new ArrayList<Object>());
            if (result.getResult()!=1) {
                JOptionPane.showMessageDialog(null, "Nothing found.", "Error",JOptionPane.ERROR_MESSAGE);
                leave();
            }
            else this.setVisible(true);
            
            requests = result.toString().split("\n");
            
            table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
            MyTableModel tm;
            Object[][] data = new Object[requests.length][requests[0].split("\t").length];
            for (int i = 0; i<requests.length;i++) {
                data[i] = requests[i].split("\t");
            }
            
            switch(type) {
                case 1:
                    Object[] header1 = {"Groupname","Username"};
                    tm = new MyTableModel(data,header1);
                    this.table.setModel(tm);
                    return;
                case 2:
                    Object[] header2 = {"Meeting"};
                    tm = new MyTableModel(data,header2);
                    this.table.setModel(tm);
                    return;
            }
	}
        
	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        BackBtn = new javax.swing.JButton();
        acceptBtn = new javax.swing.JButton();
        rejectBtn = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);

        BackBtn.setText("Back");
        BackBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackBtnActionPerformed(evt);
            }
        });

        acceptBtn.setText("Accept");
        acceptBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                acceptBtnActionPerformed(evt);
            }
        });

        rejectBtn.setText("Reject");
        rejectBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rejectBtnActionPerformed(evt);
            }
        });

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Title 1", "Title 2"
            }
        ));
        jScrollPane2.setViewportView(table);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 338, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 24, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(BackBtn)
                    .addComponent(rejectBtn)
                    .addComponent(acceptBtn))
                .addGap(21, 21, 21))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(101, 101, 101)
                .addComponent(acceptBtn)
                .addGap(49, 49, 49)
                .addComponent(rejectBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(BackBtn)
                .addGap(65, 65, 65))
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 392, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BackBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackBtnActionPerformed
        leave();
    }//GEN-LAST:event_BackBtnActionPerformed

    private void acceptBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_acceptBtnActionPerformed
        int selected = table.getSelectedRow();
        if (selected == -1) return;
        par = new ArrayList<Object>();
        Message result;
        if (type == 1) {
            par.add(table.getValueAt(selected,0));
            par.add(table.getValueAt(selected,1));
            result = client.sendTCP(14,par);
        }
        else {
            par.add(table.getValueAt(selected,0));
            par.add(true);
            result = client.sendTCP(18,par);
        }
        
        if(result.getResult()==1)
            JOptionPane.showMessageDialog(null, "Request accepted.", "Success",JOptionPane.INFORMATION_MESSAGE);
        else
            JOptionPane.showMessageDialog(null, "There was a problem performing this operation", "Error",JOptionPane.ERROR_MESSAGE);
        
        setModel();
    }//GEN-LAST:event_acceptBtnActionPerformed

    private void rejectBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rejectBtnActionPerformed
        int selected = table.getSelectedRow();
        if (selected == -1) return;
        par = new ArrayList<Object>();
        Message result;
        if (type == 1) {
            par.add(table.getValueAt(selected,0));
            par.add(table.getValueAt(selected,1));
            result = client.sendTCP(9,par);
        }
        else {
            par.add(table.getValueAt(selected,0));
            par.add(false);
            result = client.sendTCP(18,par);
        }
        if (result.getResult()<0)
            JOptionPane.showMessageDialog(null, result.toString(), "Error",JOptionPane.ERROR_MESSAGE);
        else{
            JOptionPane.showMessageDialog(null, result.toString(), "Success",JOptionPane.INFORMATION_MESSAGE);
        }
        setModel();
    }//GEN-LAST:event_rejectBtnActionPerformed

    private void leave() {
        client.lastWindow().setVisible(true);
        this.setVisible(false);
        this.dispose();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BackBtn;
    private javax.swing.JButton acceptBtn;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton rejectBtn;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables
}
