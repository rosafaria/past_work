package bib;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.PrintWriter;
import java.net.URLDecoder;
import java.util.ArrayList;
import java.util.InputMismatchException;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JLabel;

/** Classe de interface gráfica da janela de Login.
 * <p> Carrega e salva os dados do sistema num ArrayList de ArrayLists dados na seguinte ordem:<p>
 * 0 - Lista de DVDs <p>
 * 1 - Lista de livros <p>
 * 2 - Lista de autores <p>
 * 3 - Lista de requisições <p>
 * 4 - Lista de Administradores (Apenas adicionada se o Utilizador for Administrador) <p>
 * 5 - Lista de Leitores (Apenas adicionada se o Utilizador for Administrador) <p>
 * Lança uma janela Search com as opções principais do Sistema, passando-lhe o ArrayList dados
 * @author André Baptista (2012137523)
 * @author Rosa Faria (2005128014)
 */
public class Login extends javax.swing.JFrame {
	private ArrayList<ArrayList> propriedades;
	private ArrayList<Livro> livros;
	private ArrayList<DVD> dvds;
	private ArrayList<Leitor> leitores;
	private ArrayList<Admin> administradores;
	private ArrayList<Requisicao> requisicoes;
	private ArrayList<Autor> autores;
	private String root;
	
	/** Construtor da janela de Login.
	 * Determina qual a localização dos ficheiros com os dados da Biblioteca <p>
	 * Carrega os dados e junta-os no ArrayList propriedades (equivalente a variável "dados"
	 * descrita na classe)
	 * @throws IOException
	 * @throws ClassNotFoundException
	 */
	public Login() throws IOException, ClassNotFoundException {
		this.setContentPane(new JLabel(new ImageIcon(getClass().getResource("/bib/resources/bckgrnd3.png"))));
		this.setIconImage(new ImageIcon(getClass().getResource("/bib/resources/Logo.gif")).getImage());
		initComponents();
		this.setLocationRelativeTo(null);
		
		/**Determinar directoria dos ficheiros
		 * 1º - Procura o path do ficheiro actual
		 * 2º - se for o Jar retira o nome do Jar do endereço
		 *		se não for, acrescenta bib/resources
		 * 3º - põe a codificação em UFT-8
		 * 4º - se for Windows substitui / por \\
		 **/
		root = this.getClass().getProtectionDomain().getCodeSource().getLocation().getPath();
		if (root.contains("jar")) 
			root = root.substring(0, root.lastIndexOf("/")+1);
		else 
			root = root.substring(0, root.lastIndexOf("/build")+1)+"src/bib/resources/";
		root = URLDecoder.decode(root, "UTF-8");
		if (System.getProperty("os.name").startsWith("Windows")) root = root.substring(1).replace("/","\\\\");
		
                
		/**Inicializar variáveis**/
		dvds = new ArrayList<>();
		livros = new ArrayList<>();
		autores = new ArrayList<>();
		leitores = new ArrayList<>();
		administradores = new ArrayList<>();
		requisicoes = new ArrayList<>();
		
		/**Carregar dados**/
		loadAll();
		
		/**Guardar dados no Array que será depois passado**/
		propriedades = new ArrayList<>();
		propriedades.add(dvds);
		propriedades.add(livros);
		propriedades.add(autores);
		propriedades.add(requisicoes);
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        email = new javax.swing.JTextField();
        password = new javax.swing.JPasswordField();
        emailLabel = new javax.swing.JLabel();
        passLabel = new javax.swing.JLabel();
        login = new javax.swing.JButton();
        errorLbl = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        load = new javax.swing.JMenuItem();
        save = new javax.swing.JMenuItem();

        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        password.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                passwordActionPerformed(evt);
            }
        });

        emailLabel.setText("E-mail");

        passLabel.setText("Password");

        login.setText("Login");
        login.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginActionPerformed(evt);
            }
        });

        errorLbl.setForeground(new java.awt.Color(255, 51, 51));
        errorLbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        jMenu1.setText("Ficheiros");

        load.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.CTRL_MASK));
        load.setText("Carregar Dados");
        load.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadActionPerformed(evt);
            }
        });
        jMenu1.add(load);

        save.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        save.setText("Salvar Dados");
        save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveActionPerformed(evt);
            }
        });
        jMenu1.add(save);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 116, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(password, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(email, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(errorLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(login)
                    .addComponent(passLabel)
                    .addComponent(emailLabel))
                .addContainerGap(116, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(54, 54, 54)
                .addComponent(emailLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(email, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(47, 47, 47)
                .addComponent(passLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(password, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 24, Short.MAX_VALUE)
                .addComponent(errorLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 13, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(login)
                .addGap(10, 10, 10))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void loginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginActionPerformed
		try {
			login();
		} catch (IOException ex) {
			Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
		}
    }//GEN-LAST:event_loginActionPerformed

    private void passwordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_passwordActionPerformed
		/**Para poder entrar fazendo "Enter" na password**/
		try {
			login();
		} catch (IOException ex) {
			Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
		}
    }//GEN-LAST:event_passwordActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        /**Guarda todas as alterações**/
		saveDvds();
        saveBooks();
        saveReaders();
        saveAdmins();
        saveReqs();
		
		/**Fecha a janela e termina o programa**/
        this.setVisible(false);
        System.exit(0);
    }//GEN-LAST:event_formWindowClosing

    private void loadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadActionPerformed
        /**Carregar os dados**/
		loadAll();
    }//GEN-LAST:event_loadActionPerformed

    private void saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveActionPerformed
        /**Salvar todos os dados**/
		saveDvds();
        saveBooks();
        saveReaders();
        saveAdmins();
        saveReqs();
    }//GEN-LAST:event_saveActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField email;
    private javax.swing.JLabel emailLabel;
    private javax.swing.JLabel errorLbl;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem load;
    private javax.swing.JButton login;
    private javax.swing.JLabel passLabel;
    private javax.swing.JPasswordField password;
    private javax.swing.JMenuItem save;
    // End of variables declaration//GEN-END:variables
	
	
	/******LEITURA E ESCRITA DE FICHEIROS*****/
	
	/**Carregar ficheiro de DVDs na pasta root, com o nome "dvd.txt"**/
	private void loadDVDs() throws FileNotFoundException {
		/**esvaziar os dados anteriores**/
		dvds.clear();
		
		/**Assume-se que os dados do DVD estão no formato:
		 * Titulo
		 * Editora
		 * Ano
		 * nº de cópias
		 * duração
		 * realizador
		 */
		try (Scanner sc = new Scanner(new File(root+"DVDs"))) {
			String titulo, editora, realizador;
			int ano, nCopias, duracao;
			while(sc.hasNext()){
				try {
					titulo = sc.nextLine();
					editora = sc.nextLine();
					ano = sc.nextInt();
					sc.nextLine();
					nCopias = sc.nextInt();
					sc.nextLine();
					duracao = sc.nextInt();
					sc.nextLine();
					realizador = sc.nextLine();
					dvds.add(new DVD(titulo, ano, editora, nCopias, duracao, realizador));
					if (sc.hasNext())
						sc.nextLine();
					else break;
				}
				catch (InputMismatchException e){
					break;
				}
			}
		}
	}

	/**Carregar ficheiro de DVDs na pasta root, com o nome "livros.txt"**/
	private void loadBooks() throws FileNotFoundException {
		/**esvaziar os dados anteriores**/
		livros.clear();
		
		/**Assume-se que os dados do Livro estão no formato:
		 * Titulo
		 * Editora
		 * Ano
		 * nº de cópias
		 * Cota
		 * ISBN
		 * nº de autores
		 * Autores separados de \n
		 */
		
		try (Scanner sc = new Scanner(new File(root+"books"))) {
			String titulo, editora, cota, isbn;
			int ano, nCopias;
			while(sc.hasNext()) {
				try {
					titulo = sc.nextLine();
					editora = sc.nextLine();
					ano = sc.nextInt();
					sc.nextLine();
					nCopias = sc.nextInt();
					sc.nextLine();
					cota = sc.nextLine();
					isbn = sc.nextLine();
					ArrayList <Autor> AutoresAux = loadAutores(sc);
					livros.add(new Livro(titulo, ano, editora, nCopias, cota, isbn,AutoresAux));
					if (sc.hasNext())
						sc.nextLine();
					else break;
				}
				catch (InputMismatchException e){
					System.out.println("Error reading data.");
					break;
				}
				
			}
		}	
	}
	
	/**Carregar lista de autores de um dado livro**/
	private ArrayList <Autor> loadAutores(Scanner sc){
		/**Limpar a lista anterior**/
		autores.clear();
		
		/**Criar lista**/
		ArrayList <Autor> autorestemp = new ArrayList<>();
		/**Ler número de autores**/
		if (!sc.hasNextInt()) return null;
		int n = sc.nextInt();
		sc.nextLine();
		
		/**Lê um nome, verifica se já existe
		 * Se existir adiciona o ponteiro, 
		 * senão cria novo no array de autores da biblioteca
		 */
		for (int i = 0; i<n; i++) {
			String temp = sc.nextLine();
			Autor novo = procurarAutor(new Autor(temp));
			if (novo==null) {
				autores.add(new Autor(temp));
				novo = autores.get(autores.size()-1);
			}
			autorestemp.add(novo);
		}
		return autorestemp;
	}
	
	/**Ler ficheiros de objectos**/
	private Object readObj(File f) throws IOException, ClassNotFoundException{
		Object outobj;
		try (ObjectInputStream instream = new ObjectInputStream(new FileInputStream(f))) {
			outobj = instream.readObject();
		}
		return outobj;
	}

	/**Ler administradores do ficheiro de objectos com o nome "admin"**/
	private void loadAdmins () throws IOException, ClassNotFoundException {
		administradores.clear();
		File f = new File(root+"admin");
		administradores = (ArrayList<Admin>) readObj(f);
	}
	
	/**Ler leitores do ficheiro de objectos com o nome "readers"**/
	private void loadReaders () throws IOException, ClassNotFoundException {
		leitores.clear();
		File f = new File(root+"leitores");
		leitores = (ArrayList<Leitor>) readObj(f);
		
		/** verifica se algum dos utilizadores tem requisições no ArrayList 
		 * de requisições da Biblioteca - se tiver, substitui o utilizador que 
		 * leu pelo ponteiro do leitor da requisição
		 **/
		for (int k = 0; k<leitores.size();k++) {
			for (int i = 0; i<requisicoes.size();i++) {
				if (requisicoes.get(i).getLeitor().equals(leitores.get(k))) {
					leitores.remove(k); //tira o que leu
					leitores.add(k, requisicoes.get(i).getLeitor()); //adiciona o ponteiro encontrado na posição do ponteiro que retirou
					break;
				}
			}
		}
	}
		
	/**Ler requisições do ficheiro de objectos com o nome "reqa"**/
	private void loadReqs () throws IOException, ClassNotFoundException {
		requisicoes.clear();
		File f = new File(root+"Reqs");
		requisicoes = (ArrayList<Requisicao>) readObj(f);
		
		/** Percorre a lista de requisições lidas
		 * Para cada uma substitui o artigo da lista de artigos pelo ponteiro 
		 * para o artigo da lista de requisições
		 **/
		for (int i = 0; i<requisicoes.size();i++) {
			int j = 0;
			if (requisicoes.get(i).getArtigo() instanceof Livro) {
				for (j = 0; j<livros.size();j++) {
					if (requisicoes.get(i).getArtigo().equals(livros.get(j))) {
						livros.remove(j);
						livros.add(j, (Livro) requisicoes.get(i).getArtigo());
						break;
					}
				}
				if (j == livros.size()) {
					livros.add((Livro) requisicoes.get(i).getArtigo());
				}
			}
			else {
				for (j = 0; j<dvds.size();j++) {
					if (requisicoes.get(i).getArtigo().equals(dvds.get(j))) {
						dvds.remove(j);
						dvds.add(j, (DVD) requisicoes.get(i).getArtigo());
						break;
					}
				}
				if (j == dvds.size()) {
					dvds.add((DVD) requisicoes.get(i).getArtigo());
				}
			}
		}
	}

	/**Carregar todos os dados**/
	private void loadAll () {
		try{
			loadDVDs();
			loadBooks();
			loadReqs();
			loadReaders();
			loadAdmins();
		}
		catch(IOException | ClassNotFoundException ex) {
			/**Se não conseguiu, inicia novo conjunto de dados**/
			startAgain();
		}
	}

	/**Iniciar novo conjunto de dados **/
	private void startAgain() {
		/**Cria administrador root**/
		administradores.add(new Admin("root", null, null, "root", null, "root", null, 0));
		/**Salva todos os ficheiros para poder começar de novo**/
		saveDvds();
        saveBooks();
        saveReaders();
        saveAdmins();
        saveReqs();
	}
	
	/**Guarda o ficheiro de livros no formato correcto**/
	private void saveBooks() {
		try{
            File fw = new File(root+"books");
            FileWriter fws = new FileWriter (fw);
			try (PrintWriter bw = new PrintWriter (fws)) {
				for (int i = 0; i<livros.size();i++) {
					bw.println(livros.get(i).toFile());
				}
			}
		}
		catch(IOException e){
			System.out.println("Error writing file livros");
		}
	}
	
	/**Guarda o ficheiro de dvds no formato correcto**/
	private void saveDvds() {
		File fw = new File(root+"DVDs");
		FileWriter fws = null;
		try {
			fws = new FileWriter (fw);
		} catch (IOException ex) {
			Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
		}
		try (PrintWriter bw = new PrintWriter (fws)) {
			for (int i = 0; i<dvds.size();i++)
				bw.println(dvds.get(i).toFile());
		}
	}
	
	/**Grava ficheiro de objectos**/
	private void saveObj(File f, Object object){
		try {
			try (ObjectOutputStream outstream = new ObjectOutputStream(new FileOutputStream(f))) {
				outstream.writeObject(object);
			}
		} catch (IOException e) {}
	}
	
	/**Gravar ficheiro de objectos com requisições**/
	private void saveReqs() {
		File f = new File(root+"Reqs");
		saveObj(f,requisicoes);
	}
	
	/**Gravar ficheiro de objectos com leitores**/
	private void saveReaders() {
		File f = new File(root+"leitores");
		saveObj(f,leitores);
	}
	
	/**Gravar ficheiro de objectos com administradores**/
	private void saveAdmins() {
		File f = new File(root+"admin");
		saveObj(f,administradores);
	}
	
	/**Procurar na lista de utilizadores o e-mail inserido para poder fazer login**/
	private  Utilizador searchEmail (String email) {
		for (int i = 0; i< administradores.size();i++) {
			if (administradores.get(i).getEmail().equals(email)) return administradores.get(i);
		}
		for (int i = 0; i< leitores.size();i++) {
			if (leitores.get(i).getEmail().equals(email)) return leitores.get(i);
		}
		return null;
	}
	
	/**Procurar na lista de autores um autor que tenha o nome parcialmente igual**/
	private Autor procurarAutor(Autor novo) {
		for (int i = 0;i<autores.size();i++) {
			if (autores.get(i).getNome().equals(novo.getNome())) 
				return autores.get(i);
		}
		return null;
	}
	
	/**Ler e verificar o conjunto e-mail-password**/
	private void login () throws IOException {
		if (administradores.isEmpty()) 
			startAgain(); //Não há dados no sistema
		Utilizador novo = searchEmail(this.email.getText());
		
		if (novo==null)
			this.errorLbl.setText("Username desconhecido");
		else if (!novo.entrar(new String(this.password.getPassword()))) 
			this.errorLbl.setText("Palavra-passe incorrecta");
		else { //conseguiu entrar
			this.errorLbl.setText("");
			this.password.setText("");
			this.setVisible(false);
			if (novo instanceof Admin) {
				/**O administrador também tem acesso às listas de utilizadores**/
				propriedades.add(administradores);
				propriedades.add(leitores);
			}
			Search mainWindow = new Search(propriedades, novo);
			mainWindow.setVisible(true);
		}
	}
}
